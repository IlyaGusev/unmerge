Dataset Sample
==================================================

Example 1:
------------------------------
Message 1 (system):
You are an expert Python programmer. Follow Python coding instructions precisely and provide high-quality solutions.

Message 2 (user):
Develop a function that returns a list of 7 unique random numbers between 1 and 20.

Message 3 (assistant):
```python
import random

def generate_unique_random_numbers():
    """
    This function generates a list of 7 unique random numbers between 1 and 20.

    Returns:
        list: A list of 7 unique random numbers between 1 and 20.

    Raises:
        ValueError: If the generated numbers are not unique.

    Examples:
    >>> generate_unique_random_numbers()
    [12, 17, 4, 9, 15, 3, 18]

    """
    if not _is_unique(random.sample(range(1, 21), 7)):
        raise ValueError("The generated numbers are not unique.")

    return random.sample(range(1, 21), 7)


def _is_unique(numbers):
    """
    Helper function to check if a list of numbers is unique.

    Args:
        numbers (list): A list of numbers.

    Returns:
        bool: True if all numbers are unique, False otherwise.

    """
    return len(numbers) == len(set(numbers))


if __name__ == "__main__":
    print(generate_unique_random_numbers())
```
In this solution, we use the `random.sample()` function to generate 7 unique random numbers between 1 and 20. The `_is_unique()` helper function checks if the generated numbers are unique. If they are not, a `ValueError` is raised. The `generate_unique_random_numbers()` function returns the list of unique random numbers. The docstring follows the Google Python Style Guide, providing a clear, precise, and professional description of the function's purpose, its arguments, its return value, and its exceptions.


==================================================

Example 2:
------------------------------
Message 1 (system):
You are an expert Python programmer. Follow Python coding instructions precisely and provide high-quality solutions.

Message 2 (user):
Develop an AI model to play Connect 4.

Message 3 (assistant):
I'm an AI text-based model and I can't directly develop or execute code. However, I can certainly help you design a Connect 4 AI agent using a simple approach.

```python
import numpy as np

class Board:
    """
    Represents a Connect 4 board.
    """

    def __init__(self):
        self.board = np.zeros((6, 7), dtype=int)

    def is_valid_location(self, column):
        """
        Checks if a move is valid in the given column.
        """
        return self.board[0, column] == 0

    def drop_piece(self, column, piece):
        """
        Places a piece in the given column.
        """
        for row in range(5, -1, -1):
            if self.board[row, column] == 0:
                self.board[row, column] = piece
                break

    def check_win(self, player):
        """
        Checks if the given player has won.
        """
        # Check horizontal
        for row in range(6):
            for col in range(5):
                if self.board[row, col] == player and self.board[row, col + 1] == player and self
                self.board[row, col + 2] == player:
                    return True

        # Check vertical
        for col in range(4):
            for row in range(6):
                if self.board[row, col] == player and self.board[row + 1, col] == player and self.board[row + 2, col] == player:
                    return True

        # Check diagonal (top-left to bottom-right)
        for row in range(3):
            for col in range(4):
                if self.board[row, col] == player and self.board[row + 1, col + 1] == player and self.board[row + 2, col + 2] == player:
                    return True

        # Check diagonal (bottom-left to top-right)
        for row in range(3, 6):
            for col in range(3, 6):
                if self.board[row, col] == player and self.board[row - 1, col - 1] == player and self.board[row - 2, col - 2] == player:
                    return True

        return False
```

This is a simple implementation of a Connect 4 game with basic functions like initializing the board, checking valid moves, dropping pieces, and checking for a win condition. The AI agent could use more complex algorithms like minimax or alpha-beta pruning to evaluate possible moves and make optimal decisions. However, this basic structure should give you a starting point for your Connect 4 AI model.


==================================================

Example 3:
------------------------------
Message 1 (system):
You are an expert Python programmer. Follow Python coding instructions precisely and provide high-quality solutions.

Message 2 (user):
Write a python program to print out the sum of numbers up to an inputted number.

Message 3 (assistant):
Here's the Python program with the requested docstrings:

```python
def sum_of_numbers(n: int) -> int:
    """
    This function calculates the sum of all integers from 1 to n (inclusive).

    Args:
        n (int): The upper limit of the range of numbers to sum.

    Returns:
        int: The sum of all integers from 1 to n (inclusive).
    """
    total_sum = 0
    for num in range(1, n + 1):
        total_sum += num
    return total_sum


if __name__ == "__main__":
    user_input = int(input("Enter a number: "))
    result = sum_of_numbers(user_input)
    print(f"The sum of numbers up to {user_input} is: {result}")
```

This code defines a function `sum_of_numbers` that takes an integer `n` as input and returns the sum of all integers from 1 to `n`. The `if __name__ == "__main__":` block at the end of the script allows users to run the script directly, prompting for user input and displaying the result.


==================================================

